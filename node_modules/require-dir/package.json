{
  "_from": "require-dir",
  "_id": "require-dir@1.2.0",
  "_inBundle": false,
  "_integrity": "sha512-LY85DTSu+heYgDqq/mK+7zFHWkttVNRXC9NKcKGyuGLdlsfbjEPrIEYdCVrx6hqnJb+xSu3Lzaoo8VnmOhhjNA==",
  "_location": "/require-dir",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "require-dir",
    "fetchSpec": "latest",
    "name": "require-dir",
    "raw": "require-dir",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/require-dir/-/require-dir-1.2.0.tgz",
  "_shasum": "0d443b75e96012d3ca749cf19f529a789ae74817",
  "_shrinkwrap": null,
  "_spec": "require-dir",
  "_where": "/home/saito/IBM/node-api-ls",
  "author": {
    "email": "aseem.kishore@gmail.com",
    "name": "Aseem Kishore"
  },
  "bugs": {
    "url": "https://github.com/aseemk/requireDir/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Helper to require() directories.",
  "devDependencies": {
    "coffee-script": "^1.3.3",
    "ts-node": "^1.3.0",
    "typescript": "^1.8.0"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/aseemk/requireDir",
  "license": "MIT",
  "name": "require-dir",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/aseemk/requireDir.svg?branch=master)](https://travis-ci.org/aseemk/requireDir)\r\n[![npm version](https://badge.fury.io/js/require-dir.svg)](http://badge.fury.io/js/require-dir)\r\n\r\n# requireDir()\r\n\r\nNode helper to `require()` directories. The directory's files are examined,\r\nand each one that can be `require()`'d is `require()`'d and returned as part\r\nof a hash from that file's basename to its exported contents.\r\n\r\n## Example\r\n\r\nGiven this directory structure:\r\n\r\n```\r\ndir\r\n+ a.js\r\n+ b.json\r\n+ c.coffee\r\n+ d.txt\r\n```\r\n\r\n`requireDir('./dir')` will return the equivalent of:\r\n\r\n```js\r\n{\r\n  a: require('./dir/a.js'),\r\n  b: require('./dir/b.json')\r\n}\r\n```\r\n\r\nIf CoffeeScript is registered via `require('coffee-script/register')`,\r\n`c.coffee` will also be returned. Any extension registered with node will work the same way without any additional configuration.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install require-dir\r\n```\r\n\r\nNote that this package is *not* `requireDir` — turns out that's already\r\n[taken](https://github.com/JamesEggers1/node-requiredir)! ;)\r\n\r\n## Usage\r\n\r\nBasic usage that examines only directories' immediate files:\r\n\r\n```js\r\nvar requireDir = require('require-dir');\r\nvar dir = requireDir('./path/to/dir');\r\n```\r\n\r\nYou can optionally customize the behavior by passing an extra options object:\r\n\r\n```js\r\nvar dir = requireDir('./path/to/dir', { recurse: true });\r\n```\r\n\r\n## Options\r\n\r\n`recurse`: Whether to recursively `require()` subdirectories too.\r\n(`node_modules` within subdirectories will be ignored.)\r\nDefault is false.\r\n\r\n`filter`: Apply a filter on the filename before require-ing. For example, ignoring files prefixed with `dev` in a production environment:\r\n\r\n```js\r\nrequireDir('./dir', {\r\n  filter: function (fullPath) {\r\n    return process.env.NODE_ENV !== 'production' && !fullPath.match(/$dev/);\r\n  }\r\n})\r\n```\r\n\r\n`mapKey`: Apply a transform to the module base name after require-ing. For example, uppercasing any module names:\r\n\r\n```js\r\nrequireDir('./dir', {\r\n  mapKey: function (value, baseName) {\r\n    return baseName.toUpperCase();\r\n  }\r\n})\r\n```\r\n\r\n`mapValue`: Apply a transform to the value after require-ing. For example, uppercasing any text exported:\r\n\r\n```js\r\nrequireDir('./dir', {\r\n  mapValue: function (value, baseName) {\r\n    return typeof value === 'string' ? value.toUpperCase() : value;\r\n  }\r\n})\r\n```\r\n\r\n`duplicates`: By default, if multiple files share the same basename, only the\r\nhighest priority one is `require()`'d and returned. (Priority is determined by\r\nthe order of `require.extensions` keys, with directories taking precedence\r\nover files if `recurse` is true.) Specifying this option `require()`'s all\r\nfiles and returns full filename keys in addition to basename keys.\r\nDefault is false.\r\n\r\nIn the example above, if there were also an `a.json`, the behavior would\r\nbe the same by default, but specifying `duplicates: true` would yield:\r\n\r\n```js\r\n{\r\n  a: require('./dir/a.js'),\r\n  'a.js': require('./dir/a.js'),\r\n  'a.json': require('./dir/a.json'),\r\n  b: require('./dir/b.json'),\r\n  'b.json': require('./dir/b.json')\r\n}\r\n```\r\n\r\n`noCache`: Prevent file caching. Could be useful using gulp.watch or other watch requiring refreshed file content Default is false.\r\n\r\n```js\r\nrequireDir('./dir', { noCache: true })\r\n```\r\n\r\n`extensions`: Array of extensions to look for instead of using `require.extensions`.\r\n\r\n```js\r\nrequireDir('./dir', { extensions: ['.js', '.json'] })\r\n```\r\n\r\n## Tips\r\n\r\nMake an `index.js` in a directory with this code to clean things up:\r\n\r\n```js\r\nmodule.exports = require('require-dir')();   // defaults to '.'\r\n```\r\n\r\nAnd don't worry, the calling file is always ignored to prevent infinite loops.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/aseemk/requireDir.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "1.2.0"
}
